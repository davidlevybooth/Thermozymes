HOT_refined_bins.phy <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOT_META\\all_good_bins_stats\\MyCC.Binsanity-refine.CheckM.tree.out", header = TRUE, sep="\t")
Cluster_contigs <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOT_META\\HOT_Prokka\\all_good_bins.contigs.txt", sep="\t", header = FALSE)
HOT_Lac_genes[, 1:3]
HOT_Lac_genes <- HOT_Lac_genes[, 1:3]
colnames(HOT_Lac_genes) <- c("ID", "RefSeq TopHit", "Percent ID")
gene_to_cluster <- function(gene) {
gene.gff <- hot_gff.cds[which(hot_gff.cds$ID %in% gene), ]
gene.clust <- Cluster_contigs[which(Cluster_contigs$V2 %in% gene.gff$seqnames), ]
gene.phy <- HOT_refined_bins.phy[which(HOT_refined_bins.phy$Bin.Id %in% gene.clust$V1), ]
if(dim(gene.phy)[1] < 1) { gene.phy <- "None"}
else {
gene.phy <- as.character(gene.phy$Taxonomy..contained.[1])
gene.phy <- sapply(strsplit(gene.phy, ";", fixed=TRUE), tail, 1)
gene.phy <- paste("_", gene.phy, sep="")
}
# gene.phy <- paste(gene, gene.phy, sep="")
return(gene.phy)
}
HOT_Lac_list <- rep(NA, length(HOT_Lac_genes$V1))
i = 1
for(id in HOT_Lac_genes$V1) {
id.phy <- gene_to_cluster(id)
HOT_Lac_list[i] <- id.phy
i = i + 1
}
HOT_Lac_list
HOT_Lac_genes
HOT_Lac_list <- rep(NA, length(HOT_Lac_genes$ID))
i = 1
for(id in HOT_Lac_genes$ID) {
id.phy <- gene_to_cluster(id)
HOT_Lac_list[i] <- id.phy
i = i + 1
}
#Genes to contigs
hot_gff.file <- "C:/Users/user/Desktop/Lignin/HOT_META/HOT_Prokka/PROKKA_08162018.clean.gff"
hot_gff <- import.gff(hot_gff.file)
hot_gff.df <- as.data.frame(hot_gff)
hot_gff.cds <- hot_gff.df[which(hot_gff.df$type == "CDS"), ]
head(hot_gff.df)
dim(hot_gff.cds)
require("rtracklayer")
source("https://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
require("rtracklayer")
hot_gff.file <- "C:/Users/user/Desktop/Lignin/HOT_META/HOT_Prokka/PROKKA_08162018.clean.gff"
hot_gff <- import.gff(hot_gff.file)
hot_gff.df <- as.data.frame(hot_gff)
hot_gff.cds <- hot_gff.df[which(hot_gff.df$type == "CDS"), ]
head(hot_gff.df)
dim(hot_gff.cds)
HOT_Lac_list <- rep(NA, length(HOT_Lac_genes$ID))
i = 1
for(id in HOT_Lac_genes$ID) {
id.phy <- gene_to_cluster(id)
HOT_Lac_list[i] <- id.phy
i = i + 1
}
HOT_Lac_list
gene_to_cluster <- function(gene) {
gene.gff <- hot_gff.cds[which(hot_gff.cds$ID %in% gene), ]
gene.clust <- Cluster_contigs[which(Cluster_contigs$V2 %in% gene.gff$seqnames), ]
gene.phy <- HOT_refined_bins.phy[which(HOT_refined_bins.phy$Bin.Id %in% gene.clust$V1), ]
if(dim(gene.phy)[1] < 1) { gene.phy <- "None"}
else {
gene.phy <- as.character(gene.phy$Taxonomy..contained.[1])
gene.phy <- sapply(strsplit(gene.phy, ";", fixed=TRUE), tail, 1)
}
# gene.phy <- paste(gene, gene.phy, sep="")
return(gene.phy)
}
HOT_Lac_list <- rep(NA, length(HOT_Lac_genes$ID))
i = 1
for(id in HOT_Lac_genes$ID) {
id.phy <- gene_to_cluster(id)
HOT_Lac_list[i] <- id.phy
i = i + 1
}
HOT_Lac_list
HOT_Lac_genes$Cluster <- HOT_Lac_list
HOT_Lac_genes$Environment <- "Hot Spring"
hot_counts_19.res.df
Deseq
#########################################################################################################################
# files.rsem <- file.path(dir, "rsem", samples$run, paste0(samples$run, ".genes.results"))
hot_dir <- "C:\\Users\\user\\Desktop\\Lignin\\HOT_META\\HOT_Prokka\\fnn_reads"
hot_files <- list.files(hot_dir)
hot_samples <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\DNA extraction\\Lak_Samples.csv")
hot_samples <- hot_samples[order(hot_samples$Sample, hot_samples$Enrichment), ]
hot_sample_names <- unique(sapply(str_split(hot_files, ".s",  n = 2), `[`, 1))
hot_sample_names_short <- unique(sapply(str_split(hot_files, "_",  n = 2), `[`, 1))
hot_samples <- hot_samples[match(hot_sample_names_short, hot_samples$ID, nomatch = 0), ]
hot_samples$Iso_Enrich <- paste(hot_samples$Isotope,hot_samples$Enrichment, sep="-")
# Load Counts
##############################################################################################################################
loadCounts <- function(sample_dir, sample_names, counts_suffix = ".counts.txt", sub_dir = TRUE){
#Load featureCounts output into R
matrix = c()
for (i in c(1:length(sample_names))){
if (sub_dir == TRUE){
path = file.path(sample_dir, sample_names[i], paste(sample_names[i], counts_suffix, sep = ""))
} else {
path = file.path(sample_dir, paste(sample_names[i], counts_suffix, sep = ""))
}
print(sample_names[i])
table = readr::read_tsv(path, skip = 1, col_types = "cciicii")
print(head(table))
if (i == 1){
matrix = table[,c(1,6,7)]
}
else{
matrix = cbind(matrix, table[,7])
}
}
colnames(matrix) = c("gene_id", "length", sample_names)
return(matrix)
}
##############################################################################################################################
#Gene counts
hot_counts <- loadCounts(hot_dir, hot_sample_names, counts_suffix = ".sorted.bam.readcounts", sub_dir = FALSE)
contig.length <- hot_counts[,1:2]
rownames(hot_counts) <- hot_counts$gene_id
##############################################################################################################################
hot_samples_1920 <- hot_samples[c("19","20","23","24"),]
#hot_samples_1920 <- hot_samples[c("14","15","17","18"),]
hot_counts_1920 <- hot_counts[, grep(paste(hot_samples_1920$ID, collapse="|"), colnames(hot_counts))]
hot_counts_1920 <- hot_counts_1920[which(rowSums(hot_counts_1920) > 0), ]
head(hot_counts_1920)
dim(hot_counts_1920)
# Use DeSeq2 to normalize sample counts
##################################################################################
hot_counts_1920.dds <- DESeqDataSetFromMatrix(countData = hot_counts_1920,
colData = hot_samples_1920,
design = ~ Isotope)
hot_counts_1920.dds <- DESeq(hot_counts_1920.dds)
hot_counts_1920.res <- results(hot_counts_1920.dds)
hot_counts_1920.norm <- counts(hot_counts_1920.dds, normalized=TRUE)
#Wald test p-value: Isotope 13C vs 12C
#Isotope 13C (+) vs 12C (-)
#A positive log2 fold change for a comparison of A vs B means that gene expression in A is larger in comparison to B.
hot_counts_19.res.df <- data.frame(hot_counts_1920.res)
hot_counts_19.res.df <- hot_counts_19.res.df[which(hot_counts_19.res.df$baseMean > 0),]
hot_counts_19.res.df <- hot_counts_19.res.df[rev(order(hot_counts_19.res.df$log2FoldChange)),]
head(hot_counts_19.res.df)
dim(hot_counts_19.res.df)
library(DESeq2)
# Use DeSeq2 to normalize sample counts
##################################################################################
hot_counts_1920.dds <- DESeqDataSetFromMatrix(countData = hot_counts_1920,
colData = hot_samples_1920,
design = ~ Isotope)
hot_counts_1920.dds <- DESeq(hot_counts_1920.dds)
hot_counts_1920.res <- results(hot_counts_1920.dds)
hot_counts_1920.norm <- counts(hot_counts_1920.dds, normalized=TRUE)
#Wald test p-value: Isotope 13C vs 12C
#Isotope 13C (+) vs 12C (-)
#A positive log2 fold change for a comparison of A vs B means that gene expression in A is larger in comparison to B.
hot_counts_19.res.df <- data.frame(hot_counts_1920.res)
hot_counts_19.res.df <- hot_counts_19.res.df[which(hot_counts_19.res.df$baseMean > 0),]
hot_counts_19.res.df <- hot_counts_19.res.df[rev(order(hot_counts_19.res.df$log2FoldChange)),]
head(hot_counts_19.res.df)
dim(hot_counts_19.res.df)
HOT_Lac_counts <- hot_counts_19.res.df[match( HOT_Lac_genes$ID, rownames(hot_counts_19.res.df)), ]
HOT_Lac_counts
HOT_Lac_counts_value <- paste("Counts:", round(HOT_Lac_counts$baseMean, 1), "\nL2FC:", round(HOT_Lac_counts$log2FoldChange, 1), "\npaj:", round(HOT_Lac_counts$pvalue, 2))
HOT_Lac_genes$Enrichment <- HOT_Lac_counts_value
write.table(HOT_Lac_genes, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\HOT.Lacs.table.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep="\t")
HOG_Lac_genes <- read.csv2("C:\\Users\\user\\Desktop\\Lignin\\sLac\\HOG_Lac_genes.txt", header = FALSE, sep="\t")
library(stringr)
HOG_Lac_genes$enzyme <- sapply(str_split(HOG_Lac_genes$V2, "\\.1 ",  n = 2), `[`, 2)
HOG_Lac_genes$enzyme <- sapply(str_split(HOG_Lac_genes$enzyme, " \\[",  n = 2), `[`, 1)
HOG_Lac_genes$enzyme <- gsub("MULTISPECIES: ", "", HOG_Lac_genes$enzyme)
HOG_Lac_genes$enzyme <- ifelse(is.na(HOG_Lac_genes$enzyme), "", HOG_Lac_genes$enzyme)
HOG_refined_bins.phy <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOG_META\\all_good_bins_stats\\MyCC.Binsanity-refine.CheckM.tree.out", header = TRUE, sep="\t")
Cluster_contigs <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOG_META\\HOG_Prokka\\all_good_bins.contigs.txt", sep="\t", header = FALSE)
HOG_Lac_genes <- HOG_Lac_genes[, 1:3]
colnames(HOG_Lac_genes) <- c("ID", "RefSeq TopHit", "Percent ID")
hog_refined_bins.phy
HOG_Lac_genes <- read.csv2("C:\\Users\\user\\Desktop\\Lignin\\sLac\\HOG_Lac_genes.txt", header = FALSE, sep="\t")
library(stringr)
HOG_refined_bins.phy <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOG_META\\CheckM_Binsanity\\HOG_MyCC.Binsanity-refine.CheckM.tree.out", header = TRUE, sep="\t")
HOG_refined_bins.phy <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOG_META\\CheckM_Binsanity\\HOG_MyCC.Binsanity-refine.CheckM.tree.out", header = TRUE, sep="\t")
Cluster_contigs <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOG_META\\CheckM_Binsanity\\all_good_bins.contigs.txt", sep="\t", header = FALSE)
HOG_Lac_genes <- HOG_Lac_genes[, 1:3]
HOG_Lac_genes
colnames(HOG_Lac_genes) <- c("ID", "RefSeq TopHit", "Percent ID")
hog_samples
#Deseq
#########################################################################################################################
# files.rsem <- file.path(dir, "rsem", samples$run, paste0(samples$run, ".genes.results"))
hog_dir <- "C:\\Users\\user\\Desktop\\Lignin\\HOG_META\\HOG_Prokka\\fnn_reads"
hog_files <- list.files(hog_dir)
hog_samples <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\DNA extraction\\HOG_META_META.csv", row.names = 1)
hog_samples <- hog_samples[order(hog_samples$Sample, hog_samples$enrichment), ]
hog_sample_names <- unique(sapply(str_split(hog_files, ".s",  n = 2), `[`, 1))
hog_sample_names_short <- unique(sapply(str_split(hog_files, "_",  n = 2), `[`, 1))
hog_samples <- hog_samples[match(hog_sample_names_short, rownames(hog_samples), nomatch = 0), ]
hog_samples$Iso_Enrich <- paste(hog_samples$Isotope,hog_samples$enrichment, sep="-")
# Load Counts
##############################################################################################################################
loadCounts <- function(sample_dir, sample_names, counts_suffix = ".counts.txt", sub_dir = TRUE){
#Load featureCounts output into R
matrix = c()
for (i in c(1:length(sample_names))){
if (sub_dir == TRUE){
path = file.path(sample_dir, sample_names[i], paste(sample_names[i], counts_suffix, sep = ""))
} else {
path = file.path(sample_dir, paste(sample_names[i], counts_suffix, sep = ""))
}
print(sample_names[i])
table = readr::read_tsv(path, skip = 1, col_types = "cciicii")
print(head(table))
if (i == 1){
matrix = table[,c(1,6,7)]
}
else{
matrix = cbind(matrix, table[,7])
}
}
colnames(matrix) = c("gene_id", "length", sample_names)
return(matrix)
}
##############################################################################################################################
#Gene counts
hog_counts <- loadCounts(hog_dir, hog_sample_names, counts_suffix = ".sorted.bam.readcounts", sub_dir = FALSE)
contig.length <- hog_counts[,1:2]
rownames(hog_counts) <- hog_counts$gene_id
##############################################################################################################################
#Select comparison
##################################################################################
HOG_samples_19 <- hog_samples[c("HOG1H", "HOG3H", "HOG27H","HOG4H", "HOG6H", "HOG28H"),]
colnames(hog_counts)
HOG_counts_19 <- hog_counts[, grep(paste(rownames(HOG_samples_19),collapse="|"),colnames(hog_counts))]
dim(HOG_counts_19)
HOG_counts_19 <- HOG_counts_19[which(rowSums(HOG_counts_19) > 5),]
dim(HOG_counts_19); rownames(HOG_samples_19) <- colnames(HOG_counts_19)
head(HOG_counts_19)
# Use DeSeq2 to normalize sample counts
##################################################################################
hog_counts_19.dds <- DESeqDataSetFromMatrix(countData = HOG_counts_19,
colData = HOG_samples_19,
design = ~ Isotope)
hog_counts_19.dds <- DESeq(hog_counts_19.dds)
hog_counts_19.res <- results(hog_counts_19.dds)
hog_counts_19.norm <- counts(hog_counts_19.dds, normalized=TRUE)
#Wald test p-value: Isotope 13C vs 12C
#Isotope 13C (+) vs 12C (-)
#A positive log2 fold change for a comparison of A vs B means that gene expression in A is larger in comparison to B.
hog_counts_19.res.df <- data.frame(hog_counts_19.res)
head(hog_counts_19.res.df)
dim(hog_counts_19.res.df)
HOG_Lac_list
HOG_refined_bins.phy
HOG_Lac_genes
#Genes to contigs
gff.file <- "C:/Users/user/Desktop/Lignin/HOG_META/HOG_Prokka/PROKKA_08022018.gff.clean.gff"
gff <- import.gff(gff.file)
gff.df <- as.data.frame(gff)
gff.cds <- gff.df[which(gff.df$type == "CDS"), ]
head(gff.df)
dim(gff.df)
dim(gff.cds)
HOG_Lac_list <- rep(NA, length(HOG_Lac_genes$ID))
i = 1
for(id in HOG_Lac_genes$ID) {
id.phy <- gene_to_cluster(id)
HOG_Lac_list[i] <- id.phy
i = i + 1
}
HOG_Lac_genes$Cluster <- HOG_Lac_list
HOG_Lac_list
HOG_Lac_genes
gene_to_cluster <- function(gene) {
gene.gff <- gff.cds[which(gff.cds$ID %in% gene), ]
gene.clust <- Cluster_contigs[which(Cluster_contigs$V2 %in% gene.gff$seqnames), ]
gene.phy <- HOG_refined_bins.phy[which(HOG_refined_bins.phy$Bin.Id %in% gene.clust$V1), ]
if(dim(gene.phy)[1] < 1) { gene.phy <- "None"}
else {
gene.phy <- as.character(gene.phy$Taxonomy..contained.[1])
gene.phy <- sapply(strsplit(gene.phy, ";", fixed=TRUE), tail, 1)
}
# gene.phy <- paste(gene, gene.phy, sep="")
return(gene.phy)
}
HOG_Lac_list <- rep(NA, length(HOG_Lac_genes$ID))
i = 1
for(id in HOG_Lac_genes$ID) {
id.phy <- gene_to_cluster(id)
HOG_Lac_list[i] <- id.phy
i = i + 1
}
HOG_Lac_list
HOG_Lac_genes$Cluster <- HOG_Lac_list
HOG_Lac_genes$Environment <- "HOG Spring"
HOG_Lac_genes$Environment <- "Hog Fuel"
HOG_Lac_counts <- HOG_counts_19.res.df[match( HOG_Lac_genes$ID, rownames(HOG_counts_19.res.df)), ]
HOG_Lac_counts <- hog_counts_19.res.df[match( HOG_Lac_genes$ID, rownames(hog_counts_19.res.df)), ]
HOG_Lac_counts
HOG_Lac_counts_value <- paste("Counts:", round(HOG_Lac_counts$baseMean, 1), "\nL2FC:", round(HOG_Lac_counts$log2FoldChange, 1), "\npaj:", round(HOG_Lac_counts$pvalue, 2))
HOG_Lac_genes$Enrichment <- HOG_Lac_counts_value
HOG_Lac_genes
write.table(HOG_Lac_genes, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\HOG.Lacs.table.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep="\t")
Lac_genes <- rbind(HOG_Lac_genes, HOT_Lac_genes)
Lac_genes
write.table(Lac_genes, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\Lacs.table.txt", sep="\t")
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
hot_cazy.AA3.gff
hot_cazy.AA3.gff <- hot_gff.cds[which(hot_gff.cds$ID %in% hot_cazy_counts_pos.AA3$ID), ]
HOT_cazy <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOT_META\\HOT_Prokka\\HOThmmer.out", sep="\t", header = TRUE)
head(HOT_cazy)
table(HOT_cazy$HMM.Profile)
hot_cazy_counts <- hot_counts_19.res.df[which(hot_counts_19.res.df$ID %in% HOT_cazy$Gene.ID), ]
hot_cazy_counts
hot_counts_19.res.df
head(hot_counts_19.res.df)
hot_cazy_counts <- hot_counts_19.res.df[which(hot_counts_19.res.df$ID %in% HOT_cazy$Gene.ID), ]
hot_cazy_counts
HOT_cazy$Gene.ID
hot_cazy_counts <- hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in% HOT_cazy$Gene.ID), ]
hot_cazy_counts
hot_cazy_counts <- hot_cazy_counts[match(HOT_cazy$Gene.ID, hot_cazy_counts$ID, nomatch = 0), ]
HOT_cazy.match <- HOT_cazy[match(hot_cazy_counts$ID, HOT_cazy$Gene.ID, nomatch = 0), ]
hot_cazy_counts$cazy <- gsub(".hmm", "", HOT_cazy.match$HMM.Profile)
hot_cazy_counts <- hot_cazy_counts[rev(order(hot_cazy_counts$log2FoldChange)),]
hot_cazy_counts_pos <- hot_cazy_counts[which(hot_cazy_counts$log2FoldChange > 1), ]
head(hot_cazy_counts, 20)
hot_cazy_counts.AA3 <- hot_cazy_counts[grep("AA3", hot_cazy_counts$cazy), ]
hot_cazy_counts.AA3
HOT_cazy.match <- HOT_cazy[match(rownames(hot_cazy_counts), HOT_cazy$Gene.ID, nomatch = 0), ]
HOT_cazy.match
HOT_cazy
hot_cazy_counts <- hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in% HOT_cazy$Gene.ID), ]
hot_cazy_counts <- hot_cazy_counts[match(HOT_cazy$Gene.ID, hot_cazy_counts$ID, nomatch = 0), ]
head(hot_cazy_counts)
hot_cazy_counts <- hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in% HOT_cazy$Gene.ID), ]
head(hot_cazy_counts)
hot_cazy_counts <- hot_cazy_counts[match(HOT_cazy$Gene.ID, rownames(hot_cazy_counts), nomatch = 0), ]
head(hot_cazy_counts)
HOT_cazy.match <- HOT_cazy[match(rownames(hot_cazy_counts), HOT_cazy$Gene.ID, nomatch = 0), ]
HOT_cazy.match
hot_cazy_counts$cazy <- gsub(".hmm", "", HOT_cazy.match$HMM.Profile)
HOT_cazy.match <- HOT_cazy[match(rownames(hot_cazy_counts), HOT_cazy$Gene.ID, nomatch = 0), ]
hot_cazy_counts$cazy <- gsub(".hmm", "", HOT_cazy.match$HMM.Profile)
head(hot_cazy_counts)
dim(hot_cazy_counts)
dim(HOT_cazy.match)
HOT_cazy.match <- HOT_cazy[match(rownames(hot_cazy_counts), HOT_cazy$Gene.ID), ]
HOT_cazy.match
dim(HOT_cazy.match)
hot_cazy_counts$cazy <- gsub(".hmm", "", HOT_cazy.match$HMM.Profile)
head(hot_cazy_counts)
head(hot_cazy_counts, 20)
hot_cazy_counts.AA3 <- hot_cazy_counts[grep("AA3", hot_cazy_counts$cazy), ]
hot_cazy_counts.AA3
hot_cazy_counts.AA3
write.csv(hot_cazy_counts.AA3, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\AA3.table.txt")
write.csv(hot_cazy_counts.AA3, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\hot.AA3.table.txt")
HOG_cazy <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOG_META\\HOG_Prokka\\HOGhmmer.out", sep="\t", header = TRUE)
HOG_cazy <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOG_META\\HOG_Prokka\\HOGhmmer.out", sep="\t", header = TRUE)
head(HOG_cazy)
table(HOG_cazy$HMM.Profile)
hot_cazy_counts.AA3
HOT_cazy.match$HMM.Profile
head(HOG_counts_19.res.df)
head(hog_counts_19.res.df)
HOG_cazy_counts <- hog_counts_19.res.df[which(rownames(hog_counts_19.res.df) %in% HOG_cazy$Gene.ID), ]
head(HOG_cazy_counts)
HOG_cazy_counts <- hog_cazy_counts[match(HOG_cazy$Gene.ID, rownames(HOG_cazy_counts), nomatch = 0), ]
HOG_cazy_counts <- HOG_cazy_counts[match(HOG_cazy$Gene.ID, rownames(HOG_cazy_counts), nomatch = 0), ]
HOG_cazy_counts
HOG_cazy.match <- HOG_cazy[match(rownames(HOG_cazy_counts), HOG_cazy$Gene.ID), ]
HOG_cazy_counts$cazy <- gsub(".hmm", "", HOG_cazy.match$HMM.Profile)
head(HOG_cazy_counts)
HOG_cazy_counts <- HOG_cazy_counts[rev(order(HOG_cazy_counts$log2FoldChange)),]
head(HOG_cazy_counts, 20)
HOG_cazy_counts.AA3 <- HOG_cazy_counts[grep("AA3", HOG_cazy_counts$cazy), ]
HOG_cazy_counts.AA3
write.csv(HOG_cazy_counts.AA3, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\HOG.AA3.table.txt")
write.csv(HOG_cazy_counts.AA3, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\HOG.AA3.table.txt", sep="\t", quote = FALSE)
write.csv2(HOG_cazy_counts.AA3, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\HOG.AA3.table.txt", sep="\t", quote = FALSE)
write.table(HOG_cazy_counts.AA3, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\HOG.AA3.table.txt", quote = FALSE)
write.table(hot_cazy_counts.AA3, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\HOT.AA3.table.txt", quote=FALSE)
hot_cazy_counts.AA3
write.table(hot_cazy_counts.AA3, "C:\\Users\\user\\Desktop\\Lignin\\sLac\\HOT.AA3.table.txt", quote=FALSE)
hot_cazy_counts.AA2 <- hot_cazy_counts[grep("AA2", hot_cazy_counts$cazy), ]
hot_cazy_counts.AA2
lignin_genes <- read.csv("C:\\Users\\user\\Desktop\\Lignin\\HOT_META\\HOT_Prokka\\HOT_lignin_genes.txt", sep="\t", header = FALSE)
head(lignin_genes)
lignin_genes[grep("atalase", lignin_genes$V2), ]
HOT.catalase <- lignin_genes[grep("atalase", lignin_genes$V2), ]
hot_cazy_counts.AA2
HOT.catalase[which(HOT.catalase$V1 %in% rownames(hot_cazy_counts.AA2)), ]
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in% HOT.catalase$V1), ]
hot_cazy_counts.AA3
rownames(hot_cazy_counts.AA3)
hot_blast <- read.csv2("C:/Users/user/Desktop/Lignin/HOT_META/HOT_Prokka/PROKKA_08162018.faa.diamond.output", sep="\t", header = FALSE)
head(hot_blast$V1)
hot_blast[which(hot_blast$V1 %in% rownames(hot_cazy_counts.AA3)), ]
HOT.catalase
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in% HOT.catalase$V1), ]
hot_blast[which(hot_blast$V1 %in% rownames(hot_cazy_counts.AA3)), ]
hot_cazy_counts.AA3
hot_blast[which(hot_blast$V1 %in% rownames(hot_cazy_counts.AA3)), ]
hot_cazy_counts.AA3
hot_blast[which(hot_blast$V1 %in% rownames(hot_cazy_counts.AA3)), ]
HOT.catalase <- lignin_genes[grep("atalase", lignin_genes$V2), ]
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in% HOT.catalase$V1), ]
HOT.catalase
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in% HOT.catalase$V1), ]
hot_DCA <- read.csv2("C:/Users/user/Desktop/Lignin/sLac/HOT.DCA.output", sep="\t", header = FALSE)
hot_DCA
AA3.blast <- hot_blast[which(hot_blast$V1 %in% rownames(hot_cazy_counts.AA3)), ]
HOT.AA3.blast <- hot_blast[which(hot_blast$V1 %in% rownames(hot_cazy_counts.AA3)), ]
HOT.catalase.blast <- lignin_genes[grep("atalase", lignin_genes$V2), ]
HOT.AA3.blast[which(HOT.AA3.blast$V1 %in% hot_DCA$V1), ]
hot_DCA.blast <- read.csv2("C:/Users/user/Desktop/Lignin/sLac/HOT.DCA.output", sep="\t", header = FALSE)
HOT.DCA.AA3.blast <- HOT.AA3.blast[which(HOT.AA3.blast$V1 %in% hot_DCA$V1), ]
hot_cazy_counts.AA3
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in% hot_DCA.blast$V1), ]
hot_blast[which(hot_blast$V1 %in% hot_DCA.blast$V1), ]
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in% hot_DCA.blast$V1), ]
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) == "247211"), ]
rownames(hot_counts)
hot_counts[which(rownames(hot_counts) == "247211"), ]
hot_counts[which(rownames(hot_counts) == "HOT_247211"), ]
hot_DCA.blast[grep("stilbene", hot_DCA.blast$V2),]
hot_stilbene.blast <- hot_DCA.blast[grep("stilbene", hot_DCA.blast$V2),]
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in% hot_stilbene.blast$V1), ]
hot_cazy_counts.AA2
hot_cazy_counts.AA3
hot_blast[grep("Glutathione", hot_blast$V2), ]
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) == "HOT_79094" ), ]
hot_blast[grep("Glutathione", hot_blast$V2), ]
hot_DCA.blast <- read.csv2("C:/Users/user/Desktop/Lignin/sLac/HOT.DCA.output", sep="\t", header = FALSE)
hot_DCA.blast
hot_DCA.blast[grep("ligE|ligF", hot_DCA.blast$V2), ]
HOG_blast <- read.csv2("C:/Users/user/Desktop/Lignin/HOG_META/HOG_Prokka/PROKKA_08162018.faa.diamond.output", sep="\t", header = FALSE)
HOG_blast <- read.csv2("C:/Users/user/Desktop/Lignin/HOG_META/HOG_Prokka/PROKKA_08022018.faa.diamond.output", sep="\t", header = FALSE)
HOG_DCA.blast <- read.csv2("C:/Users/user/Desktop/Lignin/sLac/HOG.DCA.output", sep="\t", header = FALSE)
HOG_DCA.blast
HOG_DCA.blast[grep("ligE|ligF", HOG_DCA.blast$V2), ]
HOG_blast <- read.csv2("C:/Users/user/Desktop/Lignin/HOG_META/HOG_Prokka/PROKKA_08022018.faa.diamond.output", sep="\t", header = FALSE)
HOG_blast <- read.csv2("C:/Users/user/Desktop/Lignin/HOG_META/HOG_Prokka/PROKKA_08022018.clean.faa.diamond.output", sep="\t", header = FALSE)
HOG.B.etherases <- HOG_DCA.blast[grep("ligE|ligF", HOG_DCA.blast$V2), ]
head(hog_counts_19.res.df)
hog_counts_19.res.df[which(rownames(hog_counts_19.res.df) %in%  HOG.B.etherases$V1), ]
HOT.B.etherases <- hot_DCA.blast[grep("ligE|ligF", hot_DCA.blast$V2), ]
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in%  HOG.B.etherases$V1), ]
HOT.B.etherases
hot_counts_19.res.df[which(rownames(hot_counts_19.res.df) %in%  HOT.B.etherases$V1), ]
HOG.B.etherases <- HOG_DCA.blast[grep("ligE|ligF", HOG_DCA.blast$V2), ]
hog_counts_19.res.df[which(rownames(hog_counts_19.res.df) %in%  HOG.B.etherases$V1), ]
HOG_Lac_list <- rep(NA, length(HOG.B.etherases$V1))
i = 1
for(id in HOG.B.etherases$V1) {
id.phy <- gene_to_cluster(id)
HOG_Lac_list[i] <- id.phy
i = i + 1
}
HOG_Lac_list
runApp('C:/Users/user/Desktop/Lignin/sLac/Thermozymes')
runApp()
